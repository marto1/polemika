#+STARTUP: overview
#+TAGS: PROJECT(p) HOME(h) OFFICE(o) PHONE(t) ERRANDS(e)
#+STARTUP: hidestars

* todos
** TODO make API uniform in human_client and gui
** TODO embeddable grid layout
** TODO separate precalculations from dynamic behaviour(rendering)
* 1000 core words
** https://simple.wikipedia.org/wiki/Wikipedia:VOA_Special_English_Word_Book
** get the dict translated in target language
** have a base from which to jump to more complicated things
** how syntax works in general, common pitfalls with that
** learning about pronunciation principles will make remembering
   and understanding easier 
* Sentences - news articles
** overview
   Fill in words. Scenario for a diferrent gameplay style.
   For example:

   Flere unge har _søgt ind på en _videregående uddannelse inden for
   datalogi og it, men det er ikke nok til at _imødekomme den
   efterspørgsel på _arbejdskraft inden for faget, som
   it-brancheorganisationerne _forventer.

   src. https://www.version2.dk/artikel/stadig-brug-mange-flere-it-uddannede-trods-oeget-optag-878438

   There is a news article that will have empty spots that the players must fill
   for a given time with visual guidance. 
** format
   Raw text with underline followed by the word where the text will be.
   
* grammar sentences
* game log
* fallout style hacking game with new words
** SRVMSG: (players ("0x11111" "0x123211" "0x12222")) list of players 
** SRVMSG: (words ("letter1" "letter2")) - raw lines fed by the server
** CLTMSG: (guesses ("word")) - client guess
** SRVMSG: (winner "0x123211") ; (winner "0x0") - winner is 0x123211 or winner is 0x0
** SRVMSG: (guesses ("word")) - server sends back correct letters
** SRVMSG: (correct "0x123211" 3) - 3 of the letters are correct
** SRVMSG: (total_time 4200) - the total time of the game is 4200 seconds
** SRVMSG: (tick 3) - server sends master tick at 3. Ticks countdown 
** SRVMSG: (reset) - server resets internal states to initial ones.

* game protocol
** logic resides in server
** server chooses random words from a pool
** server waits for ready commands from all players
** server broadcasts ready command to all players signifying start of game
** server broadcasts list of players
** sends the words to the clients
** clients may not receive the translations
** clients send their guesses
** server checks for correctness and if correct broadcasts this player as winner
** server broadcasts correct guesses of other players to the rest BUT the orginal player
** server sends current status of game to player that requested guess check
** The protocol structural parts are strictly ASCII encoded, but payloads are assumed to be UTF-8
* game protocol - messages
** frames are separated with '\r\n'
** it's a s-expressions based protocol
** messages begin with "(" and end with ")"
** escaping can be done with ""
** first element is the command type unless specified otherwise
** nesting is valid, but only the outermost command is recognized as such
** SRVMSG: (players ("0x11111" "0x123211" "0x12222")) list of players 
** SRVMSG: (words ("one" "two" "three")) - the words are one two three
** CLTMSG: (guesses ("en" "to" "tre")) - the client's guesses are en, to and tre
** SRVMSG: (winner "0x123211") ; (winner "0x0") - winner is 0x123211 or winner is 0x0
** SRVMSG: (guesses ("en" "to" "tre")) - server sends back correct guesses
** SRVMSG: (correct "0x123211" (0 1 0)) - player 0x123211 guess for the second word is correct
** SRVMSG: (total_time 4200) - the total time of the game is 4200 seconds
** SRVMSG: (tick 3) - server sends master tick at 3. Ticks countdown 
** SRVMSG: (reset) - server resets internal states to initial ones.
** SRV/CLTMSG: (error 10 "Invalid syntax") - detected syntax error
** SRV: (disconnected "0x11111") - player "0x11111" disconnected
* Dummy AI player
** plays via the game protocol
** sends guesses as fast as possible
** picks a random sequence of letters based on a letter pool
** word length is variable and maximum len is based on a constant 
* AI player
** plays via the game protocol
** memorizes words with varied success 
